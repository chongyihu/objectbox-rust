/* automatically generated by rust-bindgen */

pub const OBX_VERSION_MAJOR: u32 = 0;
pub const OBX_VERSION_MINOR: u32 = 18;
pub const OBX_VERSION_PATCH: u32 = 0;
pub const OBX_ID_NEW: i32 = -1;
pub const OBX_SUCCESS: u32 = 0;
pub const OBX_NOT_FOUND: u32 = 404;
pub const OBX_NO_SUCCESS: u32 = 1001;
pub const OBX_TIMEOUT: u32 = 1002;
pub const OBX_ERROR_ILLEGAL_STATE: u32 = 10001;
pub const OBX_ERROR_ILLEGAL_ARGUMENT: u32 = 10002;
pub const OBX_ERROR_ALLOCATION: u32 = 10003;
pub const OBX_ERROR_NUMERIC_OVERFLOW: u32 = 10004;
pub const OBX_ERROR_FEATURE_NOT_AVAILABLE: u32 = 10005;
pub const OBX_ERROR_SHUTTING_DOWN: u32 = 10006;
pub const OBX_ERROR_NO_ERROR_INFO: u32 = 10097;
pub const OBX_ERROR_GENERAL: u32 = 10098;
pub const OBX_ERROR_UNKNOWN: u32 = 10099;
pub const OBX_ERROR_DB_FULL: u32 = 10101;
pub const OBX_ERROR_MAX_READERS_EXCEEDED: u32 = 10102;
pub const OBX_ERROR_STORE_MUST_SHUTDOWN: u32 = 10103;
pub const OBX_ERROR_MAX_DATA_SIZE_EXCEEDED: u32 = 10104;
pub const OBX_ERROR_DB_GENERAL: u32 = 10198;
pub const OBX_ERROR_STORAGE_GENERAL: u32 = 10199;
pub const OBX_ERROR_UNIQUE_VIOLATED: u32 = 10201;
pub const OBX_ERROR_NON_UNIQUE_RESULT: u32 = 10202;
pub const OBX_ERROR_PROPERTY_TYPE_MISMATCH: u32 = 10203;
pub const OBX_ERROR_ID_ALREADY_EXISTS: u32 = 10210;
pub const OBX_ERROR_ID_NOT_FOUND: u32 = 10211;
pub const OBX_ERROR_TIME_SERIES: u32 = 10212;
pub const OBX_ERROR_CONSTRAINT_VIOLATED: u32 = 10299;
pub const OBX_ERROR_STD_ILLEGAL_ARGUMENT: u32 = 10301;
pub const OBX_ERROR_STD_OUT_OF_RANGE: u32 = 10302;
pub const OBX_ERROR_STD_LENGTH: u32 = 10303;
pub const OBX_ERROR_STD_BAD_ALLOC: u32 = 10304;
pub const OBX_ERROR_STD_RANGE: u32 = 10305;
pub const OBX_ERROR_STD_OVERFLOW: u32 = 10306;
pub const OBX_ERROR_STD_OTHER: u32 = 10399;
pub const OBX_ERROR_SCHEMA: u32 = 10501;
pub const OBX_ERROR_FILE_CORRUPT: u32 = 10502;
pub const OBX_ERROR_FILE_PAGES_CORRUPT: u32 = 10503;
pub const OBX_ERROR_SCHEMA_OBJECT_NOT_FOUND: u32 = 10504;
pub const OBX_ERROR_TREE_MODEL_INVALID: u32 = 10601;
pub const OBX_ERROR_TREE_VALUE_TYPE_MISMATCH: u32 = 10602;
pub const OBX_ERROR_TREE_PATH_NON_UNIQUE: u32 = 10603;
pub const OBX_ERROR_TREE_PATH_ILLEGAL: u32 = 10604;
pub const OBX_ERROR_TREE_OTHER: u32 = 10699;
pub type obx_schema_id = u32;
pub type obx_uid = u64;
pub type obx_id = u64;
pub type obx_err = ::std::os::raw::c_int;
pub type obx_data_visitor = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        size: usize,
        user_data: *mut ::std::os::raw::c_void,
    ) -> bool,
>;
extern "C" {
    pub fn obx_version(
        major: *mut ::std::os::raw::c_int,
        minor: *mut ::std::os::raw::c_int,
        patch: *mut ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn obx_version_is_at_least(
        major: ::std::os::raw::c_int,
        minor: ::std::os::raw::c_int,
        patch: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn obx_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_version_core_string() -> *const ::std::os::raw::c_char;
}
pub const OBXFeature_ResultArray: OBXFeature = 1;
pub const OBXFeature_TimeSeries: OBXFeature = 2;
pub const OBXFeature_Sync: OBXFeature = 3;
pub const OBXFeature_DebugLog: OBXFeature = 4;
pub const OBXFeature_Admin: OBXFeature = 5;
pub const OBXFeature_Tree: OBXFeature = 6;
pub const OBXFeature_SyncServer: OBXFeature = 7;
pub type OBXFeature = i32;
extern "C" {
    pub fn obx_has_feature(feature: OBXFeature) -> bool;
}
pub const OBXLogLevel_Verbose: OBXLogLevel = 10;
pub const OBXLogLevel_Debug: OBXLogLevel = 20;
pub const OBXLogLevel_Info: OBXLogLevel = 30;
pub const OBXLogLevel_Warn: OBXLogLevel = 40;
pub const OBXLogLevel_Error: OBXLogLevel = 50;
pub type OBXLogLevel = i32;
pub type obx_log_callback = ::std::option::Option<
    unsafe extern "C" fn(
        log_level: OBXLogLevel,
        message: *const ::std::os::raw::c_char,
        message_size: usize,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn obx_remove_db_files(directory: *const ::std::os::raw::c_char) -> obx_err;
}
extern "C" {
    pub fn obx_db_file_size(directory: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn obx_debug_log(enabled: bool) -> obx_err;
}
extern "C" {
    pub fn obx_debug_log_enabled() -> bool;
}
extern "C" {
    pub fn obx_thread_number() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn obx_last_error_pop(
        out_error: *mut obx_err,
        out_message: *mut *const ::std::os::raw::c_char,
    ) -> bool;
}
extern "C" {
    pub fn obx_last_error_code() -> obx_err;
}
extern "C" {
    pub fn obx_last_error_message() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_last_error_secondary() -> obx_err;
}
extern "C" {
    pub fn obx_last_error_clear();
}
extern "C" {
    pub fn obx_last_error_set(
        code: obx_err,
        secondary: obx_err,
        message: *const ::std::os::raw::c_char,
    ) -> bool;
}
pub const OBXPropertyType_Bool: OBXPropertyType = 1;
pub const OBXPropertyType_Byte: OBXPropertyType = 2;
pub const OBXPropertyType_Short: OBXPropertyType = 3;
pub const OBXPropertyType_Char: OBXPropertyType = 4;
pub const OBXPropertyType_Int: OBXPropertyType = 5;
pub const OBXPropertyType_Long: OBXPropertyType = 6;
pub const OBXPropertyType_Float: OBXPropertyType = 7;
pub const OBXPropertyType_Double: OBXPropertyType = 8;
pub const OBXPropertyType_String: OBXPropertyType = 9;
pub const OBXPropertyType_Date: OBXPropertyType = 10;
pub const OBXPropertyType_Relation: OBXPropertyType = 11;
pub const OBXPropertyType_DateNano: OBXPropertyType = 12;
pub const OBXPropertyType_Flex: OBXPropertyType = 13;
pub const OBXPropertyType_ByteVector: OBXPropertyType = 23;
pub const OBXPropertyType_StringVector: OBXPropertyType = 30;
pub type OBXPropertyType = i32;
pub const OBXEntityFlags_SYNC_ENABLED: OBXEntityFlags = 2;
pub const OBXEntityFlags_SHARED_GLOBAL_IDS: OBXEntityFlags = 4;
pub type OBXEntityFlags = i32;
pub const OBXPropertyFlags_ID: OBXPropertyFlags = 1;
pub const OBXPropertyFlags_NON_PRIMITIVE_TYPE: OBXPropertyFlags = 2;
pub const OBXPropertyFlags_NOT_NULL: OBXPropertyFlags = 4;
pub const OBXPropertyFlags_INDEXED: OBXPropertyFlags = 8;
pub const OBXPropertyFlags_RESERVED: OBXPropertyFlags = 16;
pub const OBXPropertyFlags_UNIQUE: OBXPropertyFlags = 32;
pub const OBXPropertyFlags_ID_MONOTONIC_SEQUENCE: OBXPropertyFlags = 64;
pub const OBXPropertyFlags_ID_SELF_ASSIGNABLE: OBXPropertyFlags = 128;
pub const OBXPropertyFlags_INDEX_PARTIAL_SKIP_NULL: OBXPropertyFlags = 256;
pub const OBXPropertyFlags_INDEX_PARTIAL_SKIP_ZERO: OBXPropertyFlags = 512;
pub const OBXPropertyFlags_VIRTUAL: OBXPropertyFlags = 1024;
pub const OBXPropertyFlags_INDEX_HASH: OBXPropertyFlags = 2048;
pub const OBXPropertyFlags_INDEX_HASH64: OBXPropertyFlags = 4096;
pub const OBXPropertyFlags_UNSIGNED: OBXPropertyFlags = 8192;
pub const OBXPropertyFlags_ID_COMPANION: OBXPropertyFlags = 16384;
pub const OBXPropertyFlags_UNIQUE_ON_CONFLICT_REPLACE: OBXPropertyFlags = 32768;
pub const OBXPropertyFlags_EXPIRATION_TIME: OBXPropertyFlags = 65536;
pub type OBXPropertyFlags = i32;
#[repr(C)]
pub struct OBX_model {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_model() -> *mut OBX_model;
}
extern "C" {
    pub fn obx_model_free(model: *mut OBX_model) -> obx_err;
}
extern "C" {
    pub fn obx_model_error_code(model: *mut OBX_model) -> obx_err;
}
extern "C" {
    pub fn obx_model_error_message(model: *mut OBX_model) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_model_entity(
        model: *mut OBX_model,
        name: *const ::std::os::raw::c_char,
        entity_id: obx_schema_id,
        entity_uid: obx_uid,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_model_entity_flags(model: *mut OBX_model, flags: OBXEntityFlags) -> obx_err;
}
extern "C" {
    pub fn obx_model_property(
        model: *mut OBX_model,
        name: *const ::std::os::raw::c_char,
        type_: OBXPropertyType,
        property_id: obx_schema_id,
        property_uid: obx_uid,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_model_property_flags(model: *mut OBX_model, flags: OBXPropertyFlags) -> obx_err;
}
extern "C" {
    pub fn obx_model_property_relation(
        model: *mut OBX_model,
        target_entity: *const ::std::os::raw::c_char,
        index_id: obx_schema_id,
        index_uid: obx_uid,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_model_property_index_id(
        model: *mut OBX_model,
        index_id: obx_schema_id,
        index_uid: obx_uid,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_model_relation(
        model: *mut OBX_model,
        relation_id: obx_schema_id,
        relation_uid: obx_uid,
        target_id: obx_schema_id,
        target_uid: obx_uid,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_model_last_entity_id(
        arg1: *mut OBX_model,
        entity_id: obx_schema_id,
        entity_uid: obx_uid,
    );
}
extern "C" {
    pub fn obx_model_last_index_id(
        model: *mut OBX_model,
        index_id: obx_schema_id,
        index_uid: obx_uid,
    );
}
extern "C" {
    pub fn obx_model_last_relation_id(
        model: *mut OBX_model,
        relation_id: obx_schema_id,
        relation_uid: obx_uid,
    );
}
extern "C" {
    pub fn obx_model_entity_last_property_id(
        model: *mut OBX_model,
        property_id: obx_schema_id,
        property_uid: obx_uid,
    ) -> obx_err;
}
#[repr(C)]
pub struct OBX_store {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OBX_store_options {
    _unused: [u8; 0],
}
pub const OBXDebugFlags_LOG_TRANSACTIONS_READ: OBXDebugFlags = 1;
pub const OBXDebugFlags_LOG_TRANSACTIONS_WRITE: OBXDebugFlags = 2;
pub const OBXDebugFlags_LOG_QUERIES: OBXDebugFlags = 4;
pub const OBXDebugFlags_LOG_QUERY_PARAMETERS: OBXDebugFlags = 8;
pub const OBXDebugFlags_LOG_ASYNC_QUEUE: OBXDebugFlags = 16;
pub const OBXDebugFlags_LOG_CACHE_HITS: OBXDebugFlags = 32;
pub const OBXDebugFlags_LOG_CACHE_ALL: OBXDebugFlags = 64;
pub const OBXDebugFlags_LOG_TREE: OBXDebugFlags = 128;
pub const OBXDebugFlags_LOG_EXCEPTION_STACK_TRACE: OBXDebugFlags = 256;
pub const OBXDebugFlags_RUN_THREADING_SELF_TEST: OBXDebugFlags = 512;
pub type OBXDebugFlags = i32;
pub const OBXPutPaddingMode_PaddingAutomatic: OBXPutPaddingMode = 1;
pub const OBXPutPaddingMode_PaddingAllowedByBuffer: OBXPutPaddingMode = 2;
pub const OBXPutPaddingMode_PaddingByCaller: OBXPutPaddingMode = 3;
pub type OBXPutPaddingMode = i32;
#[repr(C)]
pub struct OBX_bytes {
    pub data: *const ::std::os::raw::c_void,
    pub size: usize,
}
#[test]
fn bindgen_test_layout_OBX_bytes() {
    assert_eq!(
        ::std::mem::size_of::<OBX_bytes>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_bytes))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_bytes>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_bytes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_bytes>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_bytes),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_bytes>())).size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_bytes),
            "::",
            stringify!(size)
        )
    );
}
#[repr(C)]
pub struct OBX_bytes_array {
    pub bytes: *mut OBX_bytes,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_bytes_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_bytes_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_bytes_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_bytes_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_bytes_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_bytes_array>())).bytes as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_bytes_array),
            "::",
            stringify!(bytes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_bytes_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_bytes_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_bytes_lazy {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_bytes_lazy_get(
        bytes: *mut OBX_bytes_lazy,
        out_bytes: *mut *const ::std::os::raw::c_void,
        out_size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_bytes_lazy_free(bytes: *mut OBX_bytes_lazy);
}
#[repr(C)]
pub struct OBX_id_array {
    pub ids: *mut obx_id,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_id_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_id_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_id_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_id_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_id_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_id_array>())).ids as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_id_array),
            "::",
            stringify!(ids)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_id_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_id_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_string_array {
    pub items: *mut *const ::std::os::raw::c_char,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_string_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_string_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_string_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_string_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_string_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_string_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_string_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_string_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_string_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_int64_array {
    pub items: *const i64,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_int64_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_int64_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_int64_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_int64_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_int64_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int64_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int64_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int64_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int64_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_int32_array {
    pub items: *const i32,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_int32_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_int32_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_int32_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_int32_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_int32_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int32_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int32_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int32_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int32_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_int16_array {
    pub items: *const i16,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_int16_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_int16_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_int16_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_int16_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_int16_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int16_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int16_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int16_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int16_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_int8_array {
    pub items: *const i8,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_int8_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_int8_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_int8_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_int8_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_int8_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int8_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int8_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_int8_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_int8_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_double_array {
    pub items: *const f64,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_double_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_double_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_double_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_double_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_double_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_double_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_double_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_double_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_double_array),
            "::",
            stringify!(count)
        )
    );
}
#[repr(C)]
pub struct OBX_float_array {
    pub items: *const f32,
    pub count: usize,
}
#[test]
fn bindgen_test_layout_OBX_float_array() {
    assert_eq!(
        ::std::mem::size_of::<OBX_float_array>(),
        16usize,
        concat!("Size of: ", stringify!(OBX_float_array))
    );
    assert_eq!(
        ::std::mem::align_of::<OBX_float_array>(),
        8usize,
        concat!("Alignment of ", stringify!(OBX_float_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_float_array>())).items as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_float_array),
            "::",
            stringify!(items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<OBX_float_array>())).count as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(OBX_float_array),
            "::",
            stringify!(count)
        )
    );
}
extern "C" {
    pub fn obx_opt() -> *mut OBX_store_options;
}
extern "C" {
    pub fn obx_opt_directory(
        opt: *mut OBX_store_options,
        dir: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_opt_max_db_size_in_kb(opt: *mut OBX_store_options, size_in_kb: u64);
}
extern "C" {
    pub fn obx_opt_max_data_size_in_kb(opt: *mut OBX_store_options, size_in_kb: u64);
}
extern "C" {
    pub fn obx_opt_file_mode(opt: *mut OBX_store_options, file_mode: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn obx_opt_max_readers(opt: *mut OBX_store_options, max_readers: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn obx_opt_no_reader_thread_locals(opt: *mut OBX_store_options, flag: bool);
}
extern "C" {
    pub fn obx_opt_model(opt: *mut OBX_store_options, model: *mut OBX_model) -> obx_err;
}
extern "C" {
    pub fn obx_opt_model_bytes(
        opt: *mut OBX_store_options,
        bytes: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_opt_model_bytes_direct(
        opt: *mut OBX_store_options,
        bytes: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_opt_validate_on_open(
        opt: *mut OBX_store_options,
        page_limit: usize,
        leaf_level: bool,
    );
}
extern "C" {
    pub fn obx_opt_put_padding_mode(opt: *mut OBX_store_options, mode: OBXPutPaddingMode);
}
extern "C" {
    pub fn obx_opt_read_schema(opt: *mut OBX_store_options, value: bool);
}
extern "C" {
    pub fn obx_opt_use_previous_commit(opt: *mut OBX_store_options, value: bool);
}
extern "C" {
    pub fn obx_opt_read_only(opt: *mut OBX_store_options, value: bool);
}
extern "C" {
    pub fn obx_opt_debug_flags(opt: *mut OBX_store_options, flags: u32);
}
extern "C" {
    pub fn obx_opt_add_debug_flags(opt: *mut OBX_store_options, flags: u32);
}
extern "C" {
    pub fn obx_opt_async_max_queue_length(opt: *mut OBX_store_options, value: usize);
}
extern "C" {
    pub fn obx_opt_async_throttle_at_queue_length(opt: *mut OBX_store_options, value: usize);
}
extern "C" {
    pub fn obx_opt_async_throttle_micros(opt: *mut OBX_store_options, value: u32);
}
extern "C" {
    pub fn obx_opt_async_max_in_tx_duration(opt: *mut OBX_store_options, micros: u32);
}
extern "C" {
    pub fn obx_opt_async_max_in_tx_operations(opt: *mut OBX_store_options, value: u32);
}
extern "C" {
    pub fn obx_opt_async_pre_txn_delay(opt: *mut OBX_store_options, delay_micros: u32);
}
extern "C" {
    pub fn obx_opt_async_pre_txn_delay4(
        opt: *mut OBX_store_options,
        delay_micros: u32,
        delay2_micros: u32,
        min_queue_length_for_delay2: usize,
    );
}
extern "C" {
    pub fn obx_opt_async_post_txn_delay(opt: *mut OBX_store_options, delay_micros: u32);
}
extern "C" {
    pub fn obx_opt_async_post_txn_delay5(
        opt: *mut OBX_store_options,
        delay_micros: u32,
        delay2_micros: u32,
        min_queue_length_for_delay2: usize,
        subtract_processing_time: bool,
    );
}
extern "C" {
    pub fn obx_opt_async_minor_refill_threshold(opt: *mut OBX_store_options, queue_length: usize);
}
extern "C" {
    pub fn obx_opt_async_minor_refill_max_count(opt: *mut OBX_store_options, value: u32);
}
extern "C" {
    pub fn obx_opt_async_max_tx_pool_size(opt: *mut OBX_store_options, value: usize);
}
extern "C" {
    pub fn obx_opt_async_object_bytes_max_cache_size(opt: *mut OBX_store_options, value: u64);
}
extern "C" {
    pub fn obx_opt_async_object_bytes_max_size_to_cache(opt: *mut OBX_store_options, value: u64);
}
extern "C" {
    pub fn obx_opt_log_callback(
        opt: *mut OBX_store_options,
        callback: obx_log_callback,
        user_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn obx_opt_get_directory(opt: *mut OBX_store_options) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_opt_get_max_db_size_in_kb(opt: *mut OBX_store_options) -> u64;
}
extern "C" {
    pub fn obx_opt_get_max_data_size_in_kb(opt: *mut OBX_store_options) -> u64;
}
extern "C" {
    pub fn obx_opt_get_debug_flags(opt: *mut OBX_store_options) -> u32;
}
extern "C" {
    pub fn obx_opt_free(opt: *mut OBX_store_options);
}
extern "C" {
    pub fn obx_store_open(opt: *mut OBX_store_options) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_is_open(path: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn obx_store_attach(path: *const ::std::os::raw::c_char) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_attach_id(store_id: u64) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_attach_or_open(
        opt: *mut OBX_store_options,
        check_matching_options: bool,
        out_attached: *mut bool,
    ) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_id(store: *mut OBX_store) -> u64;
}
extern "C" {
    pub fn obx_store_clone(store: *mut OBX_store) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_wrap(core_store: *mut ::std::os::raw::c_void) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_store_entity_id(
        store: *mut OBX_store,
        entity_name: *const ::std::os::raw::c_char,
    ) -> obx_schema_id;
}
extern "C" {
    pub fn obx_store_entity_property_id(
        store: *mut OBX_store,
        entity_id: obx_schema_id,
        property_name: *const ::std::os::raw::c_char,
    ) -> obx_schema_id;
}
extern "C" {
    pub fn obx_store_await_async_completion(store: *mut OBX_store) -> bool;
}
extern "C" {
    pub fn obx_store_await_async_submitted(store: *mut OBX_store) -> bool;
}
extern "C" {
    pub fn obx_store_debug_flags(store: *mut OBX_store, flags: OBXDebugFlags) -> obx_err;
}
extern "C" {
    pub fn obx_store_opened_with_previous_commit(store: *mut OBX_store) -> bool;
}
extern "C" {
    pub fn obx_store_prepare_to_close(store: *mut OBX_store) -> obx_err;
}
extern "C" {
    pub fn obx_store_close(store: *mut OBX_store) -> obx_err;
}
#[repr(C)]
pub struct OBX_txn {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_txn_write(store: *mut OBX_store) -> *mut OBX_txn;
}
extern "C" {
    pub fn obx_txn_read(store: *mut OBX_store) -> *mut OBX_txn;
}
extern "C" {
    pub fn obx_txn_success(txn: *mut OBX_txn) -> obx_err;
}
extern "C" {
    pub fn obx_txn_close(txn: *mut OBX_txn) -> obx_err;
}
extern "C" {
    pub fn obx_txn_abort(txn: *mut OBX_txn) -> obx_err;
}
extern "C" {
    pub fn obx_txn_data_size(
        txn: *mut OBX_txn,
        out_committed_size: *mut u64,
        out_size_change: *mut u64,
    ) -> obx_err;
}
#[repr(C)]
pub struct OBX_cursor {
    _unused: [u8; 0],
}
pub const OBXPutMode_PUT: OBXPutMode = 1;
pub const OBXPutMode_INSERT: OBXPutMode = 2;
pub const OBXPutMode_UPDATE: OBXPutMode = 3;
pub type OBXPutMode = i32;
extern "C" {
    pub fn obx_cursor(txn: *mut OBX_txn, entity_id: obx_schema_id) -> *mut OBX_cursor;
}
extern "C" {
    pub fn obx_cursor_close(cursor: *mut OBX_cursor) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_id_for_put(cursor: *mut OBX_cursor, id_or_zero: obx_id) -> obx_id;
}
extern "C" {
    pub fn obx_cursor_put(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_put4(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_put_new(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_insert(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_update(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_put_object(
        cursor: *mut OBX_cursor,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_cursor_put_object4(
        cursor: *mut OBX_cursor,
        data: *mut ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_cursor_get(
        cursor: *mut OBX_cursor,
        id: obx_id,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_get_all(cursor: *mut OBX_cursor) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_cursor_first(
        cursor: *mut OBX_cursor,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_next(
        cursor: *mut OBX_cursor,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_seek(cursor: *mut OBX_cursor, id: obx_id) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_current(
        cursor: *mut OBX_cursor,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_remove(cursor: *mut OBX_cursor, id: obx_id) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_remove_all(cursor: *mut OBX_cursor) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_count(cursor: *mut OBX_cursor, count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_count_max(
        cursor: *mut OBX_cursor,
        max_count: u64,
        out_count: *mut u64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_is_empty(cursor: *mut OBX_cursor, out_is_empty: *mut bool) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_backlinks(
        cursor: *mut OBX_cursor,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        id: obx_id,
    ) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_cursor_backlink_ids(
        cursor: *mut OBX_cursor,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        id: obx_id,
    ) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_cursor_rel_put(
        cursor: *mut OBX_cursor,
        relation_id: obx_schema_id,
        source_id: obx_id,
        target_id: obx_id,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_rel_remove(
        cursor: *mut OBX_cursor,
        relation_id: obx_schema_id,
        source_id: obx_id,
        target_id: obx_id,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_rel_ids(
        cursor: *mut OBX_cursor,
        relation_id: obx_schema_id,
        source_id: obx_id,
    ) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_cursor_ts_min_max(
        cursor: *mut OBX_cursor,
        out_min_id: *mut obx_id,
        out_min_value: *mut i64,
        out_max_id: *mut obx_id,
        out_max_value: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_cursor_ts_min_max_range(
        cursor: *mut OBX_cursor,
        range_begin: i64,
        range_end: i64,
        out_min_id: *mut obx_id,
        out_min_value: *mut i64,
        out_max_id: *mut obx_id,
        out_max_value: *mut i64,
    ) -> obx_err;
}
#[repr(C)]
pub struct OBX_box {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_box(store: *mut OBX_store, entity_id: obx_schema_id) -> *mut OBX_box;
}
extern "C" {
    pub fn obx_box_store(box_: *mut OBX_box) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_box_contains(box_: *mut OBX_box, id: obx_id, out_contains: *mut bool) -> obx_err;
}
extern "C" {
    pub fn obx_box_contains_many(
        box_: *mut OBX_box,
        ids: *const OBX_id_array,
        out_contains: *mut bool,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_get(
        box_: *mut OBX_box,
        id: obx_id,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_get_many(box_: *mut OBX_box, ids: *const OBX_id_array) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_box_get_all(box_: *mut OBX_box) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_box_visit_many(
        box_: *mut OBX_box,
        ids: *const OBX_id_array,
        visitor: obx_data_visitor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_visit_all(
        box_: *mut OBX_box,
        visitor: obx_data_visitor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_id_for_put(box_: *mut OBX_box, id_or_zero: obx_id) -> obx_id;
}
extern "C" {
    pub fn obx_box_ids_for_put(
        box_: *mut OBX_box,
        count: u64,
        out_first_id: *mut obx_id,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_put(
        box_: *mut OBX_box,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_insert(
        box_: *mut OBX_box,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_update(
        box_: *mut OBX_box,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_put5(
        box_: *mut OBX_box,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_put_object(
        box_: *mut OBX_box,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_box_put_object4(
        box_: *mut OBX_box,
        data: *mut ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_box_put_many(
        box_: *mut OBX_box,
        objects: *const OBX_bytes_array,
        ids: *const obx_id,
        mode: OBXPutMode,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_put_many5(
        box_: *mut OBX_box,
        objects: *const OBX_bytes_array,
        ids: *const obx_id,
        mode: OBXPutMode,
        fail_on_id_failure: bool,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_remove(box_: *mut OBX_box, id: obx_id) -> obx_err;
}
extern "C" {
    pub fn obx_box_remove_many(
        box_: *mut OBX_box,
        ids: *const OBX_id_array,
        out_count: *mut u64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_remove_all(box_: *mut OBX_box, out_count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_box_is_empty(box_: *mut OBX_box, out_is_empty: *mut bool) -> obx_err;
}
extern "C" {
    pub fn obx_box_count(box_: *mut OBX_box, limit: u64, out_count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_box_get_backlink_ids(
        box_: *mut OBX_box,
        property_id: obx_schema_id,
        id: obx_id,
    ) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_box_rel_put(
        box_: *mut OBX_box,
        relation_id: obx_schema_id,
        source_id: obx_id,
        target_id: obx_id,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_rel_remove(
        box_: *mut OBX_box,
        relation_id: obx_schema_id,
        source_id: obx_id,
        target_id: obx_id,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_rel_get_ids(
        box_: *mut OBX_box,
        relation_id: obx_schema_id,
        id: obx_id,
    ) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_box_rel_get_backlink_ids(
        box_: *mut OBX_box,
        relation_id: obx_schema_id,
        id: obx_id,
    ) -> *mut OBX_id_array;
}
pub type obx_status_callback = ::std::option::Option<
    unsafe extern "C" fn(status: obx_err, user_data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn obx_expired_objects_remove(
        txn: *mut OBX_txn,
        entity_id: obx_schema_id,
        out_removed_count: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_expired_objects_remove_async(
        store: *mut OBX_store,
        entity_id: obx_schema_id,
        callback: obx_status_callback,
        user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_ts_min_max(
        box_: *mut OBX_box,
        out_min_id: *mut obx_id,
        out_min_value: *mut i64,
        out_max_id: *mut obx_id,
        out_max_value: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_box_ts_min_max_range(
        box_: *mut OBX_box,
        range_begin: i64,
        range_end: i64,
        out_min_id: *mut obx_id,
        out_min_value: *mut i64,
        out_max_id: *mut obx_id,
        out_max_value: *mut i64,
    ) -> obx_err;
}
#[repr(C)]
pub struct OBX_async {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_async(box_: *mut OBX_box) -> *mut OBX_async;
}
extern "C" {
    pub fn obx_async_put(
        async_: *mut OBX_async,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_async_put5(
        async_: *mut OBX_async,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_async_insert(
        async_: *mut OBX_async,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_async_update(
        async_: *mut OBX_async,
        id: obx_id,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_async_put_object(
        async_: *mut OBX_async,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_async_put_object4(
        async_: *mut OBX_async,
        data: *mut ::std::os::raw::c_void,
        size: usize,
        mode: OBXPutMode,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_async_insert_object(
        async_: *mut OBX_async,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> obx_id;
}
extern "C" {
    pub fn obx_async_remove(async_: *mut OBX_async, id: obx_id) -> obx_err;
}
extern "C" {
    pub fn obx_async_create(box_: *mut OBX_box, enqueue_timeout_millis: u64) -> *mut OBX_async;
}
extern "C" {
    pub fn obx_async_close(async_: *mut OBX_async) -> obx_err;
}
#[repr(C)]
pub struct OBX_query_builder {
    _unused: [u8; 0],
}
pub const OBXOrderFlags_DESCENDING: OBXOrderFlags = 1;
pub const OBXOrderFlags_CASE_SENSITIVE: OBXOrderFlags = 2;
pub const OBXOrderFlags_UNSIGNED: OBXOrderFlags = 4;
pub const OBXOrderFlags_NULLS_LAST: OBXOrderFlags = 8;
pub const OBXOrderFlags_NULLS_ZERO: OBXOrderFlags = 16;
pub type OBXOrderFlags = i32;
pub type obx_qb_cond = ::std::os::raw::c_int;
extern "C" {
    pub fn obx_query_builder(
        store: *mut OBX_store,
        entity_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
extern "C" {
    pub fn obx_qb_close(builder: *mut OBX_query_builder) -> obx_err;
}
extern "C" {
    pub fn obx_qb_type_id(builder: *mut OBX_query_builder) -> obx_schema_id;
}
extern "C" {
    pub fn obx_qb_error_code(builder: *mut OBX_query_builder) -> obx_err;
}
extern "C" {
    pub fn obx_qb_error_message(builder: *mut OBX_query_builder) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_qb_null(builder: *mut OBX_query_builder, property_id: obx_schema_id) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_not_null(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_equals_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_not_equals_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_contains_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_contains_element_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_contains_key_value_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        key: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_starts_with_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_ends_with_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_than_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_or_equal_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_than_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_or_equal_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_in_strings(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        values: *const *const ::std::os::raw::c_char,
        count: usize,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_any_equals_string(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        case_sensitive: bool,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_equals_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_not_equals_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_than_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_or_equal_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_than_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_or_equal_int(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_between_2ints(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value_a: i64,
        value_b: i64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_in_int64s(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        values: *const i64,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_not_in_int64s(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        values: *const i64,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_in_int32s(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        values: *const i32,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_not_in_int32s(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        values: *const i32,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_than_double(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: f64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_or_equal_double(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: f64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_than_double(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: f64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_or_equal_double(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: f64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_between_2doubles(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value_a: f64,
        value_b: f64,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_equals_bytes(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_than_bytes(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_greater_or_equal_bytes(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_than_bytes(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_less_or_equal_bytes(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_relation_count_property(
        builder: *mut OBX_query_builder,
        relation_entity_id: obx_schema_id,
        relation_property_id: obx_schema_id,
        relation_count: i32,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_all(
        builder: *mut OBX_query_builder,
        conditions: *const obx_qb_cond,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_any(
        builder: *mut OBX_query_builder,
        conditions: *const obx_qb_cond,
        count: usize,
    ) -> obx_qb_cond;
}
extern "C" {
    pub fn obx_qb_param_alias(
        builder: *mut OBX_query_builder,
        alias: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_qb_order(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
        flags: OBXOrderFlags,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_qb_link_property(
        builder: *mut OBX_query_builder,
        property_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
extern "C" {
    pub fn obx_qb_backlink_property(
        builder: *mut OBX_query_builder,
        source_entity_id: obx_schema_id,
        source_property_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
extern "C" {
    pub fn obx_qb_link_standalone(
        builder: *mut OBX_query_builder,
        relation_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
extern "C" {
    pub fn obx_qb_backlink_standalone(
        builder: *mut OBX_query_builder,
        relation_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
extern "C" {
    pub fn obx_qb_link_time(
        builder: *mut OBX_query_builder,
        linked_entity_id: obx_schema_id,
        begin_property_id: obx_schema_id,
        end_property_id: obx_schema_id,
    ) -> *mut OBX_query_builder;
}
#[repr(C)]
pub struct OBX_query {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_query(builder: *mut OBX_query_builder) -> *mut OBX_query;
}
extern "C" {
    pub fn obx_query_close(query: *mut OBX_query) -> obx_err;
}
extern "C" {
    pub fn obx_query_clone(query: *mut OBX_query) -> *mut OBX_query;
}
extern "C" {
    pub fn obx_query_offset(query: *mut OBX_query, offset: usize) -> obx_err;
}
extern "C" {
    pub fn obx_query_offset_limit(query: *mut OBX_query, offset: usize, limit: usize) -> obx_err;
}
extern "C" {
    pub fn obx_query_limit(query: *mut OBX_query, limit: usize) -> obx_err;
}
extern "C" {
    pub fn obx_query_find(query: *mut OBX_query) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_query_find_first(
        query: *mut OBX_query,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_find_unique(
        query: *mut OBX_query,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_visit(
        query: *mut OBX_query,
        visitor: obx_data_visitor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_find_ids(query: *mut OBX_query) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_query_count(query: *mut OBX_query, out_count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_query_remove(query: *mut OBX_query, out_count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_query_describe(query: *mut OBX_query) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_query_describe_params(query: *mut OBX_query) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn obx_query_cursor_visit(
        query: *mut OBX_query,
        cursor: *mut OBX_cursor,
        visitor: obx_data_visitor,
        user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_cursor_find(
        query: *mut OBX_query,
        cursor: *mut OBX_cursor,
    ) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_query_cursor_find_ids(
        query: *mut OBX_query,
        cursor: *mut OBX_cursor,
    ) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_query_cursor_count(
        query: *mut OBX_query,
        cursor: *mut OBX_cursor,
        out_count: *mut u64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_cursor_remove(
        query: *mut OBX_query,
        cursor: *mut OBX_cursor,
        out_count: *mut u64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_string(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_2strings(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_char,
        value2: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_strings(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        values: *const *const ::std::os::raw::c_char,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_int(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value: i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_2ints(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value_a: i64,
        value_b: i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_int64s(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        values: *const i64,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_int32s(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        values: *const i32,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_double(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value: f64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_2doubles(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value_a: f64,
        value_b: f64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_bytes(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_get_type_size(
        query: *mut OBX_query,
        entity_id: obx_schema_id,
        property_id: obx_schema_id,
    ) -> usize;
}
extern "C" {
    pub fn obx_query_param_alias_string(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_strings(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        values: *const *const ::std::os::raw::c_char,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_int(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value: i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_2ints(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value_a: i64,
        value_b: i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_int64s(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        values: *const i64,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_int32s(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        values: *const i32,
        count: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_double(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value: f64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_2doubles(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value_a: f64,
        value_b: f64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_bytes(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_param_alias_get_type_size(
        query: *mut OBX_query,
        alias: *const ::std::os::raw::c_char,
    ) -> usize;
}
#[repr(C)]
pub struct OBX_query_prop {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_query_prop(query: *mut OBX_query, property_id: obx_schema_id)
        -> *mut OBX_query_prop;
}
extern "C" {
    pub fn obx_query_prop_close(query: *mut OBX_query_prop) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_distinct(query: *mut OBX_query_prop, distinct: bool) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_distinct_case(
        query: *mut OBX_query_prop,
        distinct: bool,
        case_sensitive: bool,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_count(query: *mut OBX_query_prop, out_count: *mut u64) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_avg(
        query: *mut OBX_query_prop,
        out_average: *mut f64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_avg_int(
        query: *mut OBX_query_prop,
        out_average: *mut i64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_min(
        query: *mut OBX_query_prop,
        out_minimum: *mut f64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_max(
        query: *mut OBX_query_prop,
        out_maximum: *mut f64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_sum(
        query: *mut OBX_query_prop,
        out_sum: *mut f64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_min_int(
        query: *mut OBX_query_prop,
        out_minimum: *mut i64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_max_int(
        query: *mut OBX_query_prop,
        out_maximum: *mut i64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_sum_int(
        query: *mut OBX_query_prop,
        out_sum: *mut i64,
        out_count: *mut i64,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_query_prop_find_strings(
        query: *mut OBX_query_prop,
        value_if_null: *const ::std::os::raw::c_char,
    ) -> *mut OBX_string_array;
}
extern "C" {
    pub fn obx_query_prop_find_int64s(
        query: *mut OBX_query_prop,
        value_if_null: *const i64,
    ) -> *mut OBX_int64_array;
}
extern "C" {
    pub fn obx_query_prop_find_int32s(
        query: *mut OBX_query_prop,
        value_if_null: *const i32,
    ) -> *mut OBX_int32_array;
}
extern "C" {
    pub fn obx_query_prop_find_int16s(
        query: *mut OBX_query_prop,
        value_if_null: *const i16,
    ) -> *mut OBX_int16_array;
}
extern "C" {
    pub fn obx_query_prop_find_int8s(
        query: *mut OBX_query_prop,
        value_if_null: *const i8,
    ) -> *mut OBX_int8_array;
}
extern "C" {
    pub fn obx_query_prop_find_doubles(
        query: *mut OBX_query_prop,
        value_if_null: *const f64,
    ) -> *mut OBX_double_array;
}
extern "C" {
    pub fn obx_query_prop_find_floats(
        query: *mut OBX_query_prop,
        value_if_null: *const f32,
    ) -> *mut OBX_float_array;
}
#[repr(C)]
pub struct OBX_observer {
    _unused: [u8; 0],
}
pub type obx_observer = ::std::option::Option<
    unsafe extern "C" fn(
        type_ids: *const obx_schema_id,
        type_ids_count: usize,
        user_data: *mut ::std::os::raw::c_void,
    ),
>;
pub type obx_observer_single_type =
    ::std::option::Option<unsafe extern "C" fn(user_data: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn obx_observe(
        store: *mut OBX_store,
        callback: obx_observer,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut OBX_observer;
}
extern "C" {
    pub fn obx_observe_single_type(
        store: *mut OBX_store,
        type_id: obx_schema_id,
        callback: obx_observer_single_type,
        user_data: *mut ::std::os::raw::c_void,
    ) -> *mut OBX_observer;
}
extern "C" {
    pub fn obx_observer_close(observer: *mut OBX_observer) -> obx_err;
}
#[repr(C)]
pub struct OBX_tree_options {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OBX_tree {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct OBX_tree_cursor {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_tree_options() -> *mut OBX_tree_options;
}
extern "C" {
    pub fn obx_tree_options_free(options: *mut OBX_tree_options);
}
extern "C" {
    pub fn obx_tree_opt_path_delimiter(
        options: *mut OBX_tree_options,
        path_delimiter: ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_tree_opt_flags(options: *mut OBX_tree_options, flags: u32) -> obx_err;
}
extern "C" {
    pub fn obx_tree(store: *mut OBX_store, options: *mut OBX_tree_options) -> *mut OBX_tree;
}
extern "C" {
    pub fn obx_tree_close(tree: *mut OBX_tree);
}
extern "C" {
    pub fn obx_tree_cursor(tree: *mut OBX_tree, txn: *mut OBX_txn) -> *mut OBX_tree_cursor;
}
extern "C" {
    pub fn obx_tree_node_conflict_count(tree: *mut OBX_tree) -> usize;
}
extern "C" {
    pub fn obx_tree_cursor_close(cursor: *mut OBX_tree_cursor);
}
extern "C" {
    pub fn obx_tree_cursor_txn(cursor: *mut OBX_tree_cursor, txn: *mut OBX_txn) -> obx_err;
}
extern "C" {
    pub fn obx_tree_cursor_get_raw(
        cursor: *mut OBX_tree_cursor,
        path: *const ::std::os::raw::c_char,
        data: *mut *const ::std::os::raw::c_void,
        size: *mut usize,
        metadata: *mut *const ::std::os::raw::c_void,
        metadata_size: *mut usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_tree_cursor_put_raw(
        cursor: *mut OBX_tree_cursor,
        path: *const ::std::os::raw::c_char,
        leaf_data: *mut ::std::os::raw::c_void,
        leaf_data_size: usize,
        type_: OBXPropertyType,
        out_id: *mut obx_id,
        leaf_metadata: *mut ::std::os::raw::c_void,
        leaf_metadata_size: usize,
        leaf_put_mode: OBXPutMode,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_tree_cursor_consolidate_node_conflicts(
        cursor: *mut OBX_tree_cursor,
        out_consolidated_count: *mut usize,
    ) -> obx_err;
}
pub type obx_tree_async_put_callback = ::std::option::Option<
    unsafe extern "C" fn(status: obx_err, id: obx_id, user_data: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn obx_tree_async_put_raw(
        tree: *mut OBX_tree,
        path: *const ::std::os::raw::c_char,
        leaf_data: *mut ::std::os::raw::c_void,
        leaf_data_size: usize,
        type_: OBXPropertyType,
        leaf_metadata: *mut ::std::os::raw::c_void,
        leaf_metadata_size: usize,
        leaf_put_mode: OBXPutMode,
        callback: obx_tree_async_put_callback,
        callback_user_data: *mut ::std::os::raw::c_void,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_tree_async_consolidate_node_conflicts(tree: *mut OBX_tree) -> obx_err;
}
#[repr(C)]
pub struct OBX_weak_store {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_weak_store(store: *mut OBX_store) -> *mut OBX_weak_store;
}
extern "C" {
    pub fn obx_weak_store_free(weak_store: *mut OBX_weak_store);
}
extern "C" {
    pub fn obx_weak_store_by_id(store_id: u64) -> *mut OBX_weak_store;
}
extern "C" {
    pub fn obx_weak_store_lock(weak_store: *mut OBX_weak_store) -> *mut OBX_store;
}
extern "C" {
    pub fn obx_bytes_free(bytes: *mut OBX_bytes);
}
extern "C" {
    pub fn obx_bytes_array(count: usize) -> *mut OBX_bytes_array;
}
extern "C" {
    pub fn obx_bytes_array_set(
        array: *mut OBX_bytes_array,
        index: usize,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_bytes_array_free(array: *mut OBX_bytes_array);
}
extern "C" {
    pub fn obx_id_array(ids: *const obx_id, count: usize) -> *mut OBX_id_array;
}
extern "C" {
    pub fn obx_id_array_free(array: *mut OBX_id_array);
}
extern "C" {
    pub fn obx_string_array_free(array: *mut OBX_string_array);
}
extern "C" {
    pub fn obx_int64_array_free(array: *mut OBX_int64_array);
}
extern "C" {
    pub fn obx_int32_array_free(array: *mut OBX_int32_array);
}
extern "C" {
    pub fn obx_int16_array_free(array: *mut OBX_int16_array);
}
extern "C" {
    pub fn obx_int8_array_free(array: *mut OBX_int8_array);
}
extern "C" {
    pub fn obx_double_array_free(array: *mut OBX_double_array);
}
extern "C" {
    pub fn obx_float_array_free(array: *mut OBX_float_array);
}
extern "C" {
    pub fn obx_posix_sem_prefix_set(prefix: *const ::std::os::raw::c_char) -> obx_err;
}
#[repr(C)]
pub struct OBX_admin_options {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_admin_opt() -> *mut OBX_admin_options;
}
extern "C" {
    pub fn obx_admin_opt_store(opt: *mut OBX_admin_options, store: *mut OBX_store) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_store_path(
        opt: *mut OBX_admin_options,
        directory: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_bind(
        opt: *mut OBX_admin_options,
        uri: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_ssl_cert(
        opt: *mut OBX_admin_options,
        cert_path: *const ::std::os::raw::c_char,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_num_threads(opt: *mut OBX_admin_options, num_threads: usize) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_unsecured_no_authentication(
        opt: *mut OBX_admin_options,
        value: bool,
    ) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_user_management(opt: *mut OBX_admin_options, value: bool) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_log_requests(opt: *mut OBX_admin_options, value: bool) -> obx_err;
}
extern "C" {
    pub fn obx_admin_opt_free(opt: *mut OBX_admin_options) -> obx_err;
}
#[repr(C)]
pub struct OBX_admin {
    _unused: [u8; 0],
}
extern "C" {
    pub fn obx_admin(options: *mut OBX_admin_options) -> *mut OBX_admin;
}
extern "C" {
    pub fn obx_admin_port(admin: *mut OBX_admin) -> u16;
}
extern "C" {
    pub fn obx_admin_close(admin: *mut OBX_admin) -> obx_err;
}
